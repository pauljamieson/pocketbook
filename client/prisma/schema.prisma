generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  financial_accounts FinancialAccount[]
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
 
model FinancialAccount {
  id           String      @id @default(cuid())
  name         String
  type         AccountType
  value        Decimal     @db.Decimal(10, 2)
  limit        Decimal     @db.Decimal(10, 2)
  interestRate Decimal     @db.Decimal(5, 2)
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountEntries AccountEntry[]
}

enum AccountType {
  SAVINGS
  CHEQUING
  CREDITCARD
  LOAN
}

model AccountEntry {
  id Int @id @default(autoincrement())
  transactionType TransactionType
  transactionAmount Decimal @db.Decimal(10,2)
  datePosted BigInt
  financialId String
  name String
  memo String?
  account FinancialAccount @relation(fields: [financialAccount], references: [id])
  financialAccount String

  @@unique([financialId, financialAccount])
}

enum TransactionType {
  DEBIT
  CREDIT
}